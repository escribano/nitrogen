#!/usr/bin/env bash
#
# nitrogen, a simple dependency manager for Go.
# Copyright (c) 2015, Luca Chiricozzi
# Released under the MIT License.
# http://opensource.org/licenses/MIT

set -eu

DEP_FILE=deps
GOPATH_SRC="$GOPATH/src/"
PKG_DIR=$PWD

# Display usage info.
function usage {
echo "usage: $0 [-f|-i [--no-clean]|-c]
    -f | --freeze  Freeze the package dependencies.
    -i | --install Install the package dependencies, with --no-clean, leave 
                   the repositories at the version chosen in nitrogen.
    -c | --clean   Clean the dependencies' repositories, restoring the 
                   default versions (git checkout master or hg update every 
                   repository)." 1>&2
exit 2
}

# Remove $GOPATH_SRC from the given path
function strip_gopath {
    echo "${1#$GOPATH_SRC}"
}

# Check if a repository is a git one
function is_git_repo {
    $(git rev-parse 2>/dev/null)
}

# Freeze the package dependencies
function freeze {
    # List dependencies of the package
    all_deps=$(go list -f '{{join .Deps " "}}' \
        | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}')

    # Take only the ones that are external
    deps=$(echo "$all_deps" | grep -v $(strip_gopath $PWD))
    
    # Create a new temp file.
    new=$(mktemp /tmp/nitrogen.XXXXXXXXXX) || exit 1

    # Remove the new dependency file if something goes wrong.
    trap 'rm -f $new; exit 1' SIGHUP SIGINT SIGTERM
    
    # Append dependencies
    for i in $deps; do
        repo_dir=$(echo "$GOPATH_SRC$i")
        cd $repo_dir
        if is_git_repo $repo_dir; then
            repo=$(strip_gopath $(git rev-parse --show-toplevel))
            ver=$(<$GOPATH_SRC$repo/.git/refs/heads/master)
        else
            repo=$(strip_gopath $(hg root))
            ver="-c $(hg id -i)"
        fi
    cd $PKG_DIR
    echo "$repo $ver" >>$new
    echo "freeze: $repo $ver"
    done

    # If something goes wrong, terminate the copy.
    trap '' SIGHUP SIGINT SIGTERM
    cp $new $DEP_FILE
    rm -f $new
}

# Select a version of the repository
function select_version {
    echo "$1" >>outupt
    cd "$GOPATH_SRC$1"
    
    echo "select: $1 ${*:2}"

    if is_git_repo $1; then
        git checkout ${*:2} >/dev/null 2>&1
    else
        hg update ${*:2} >/dev/null 2>&1
    fi
}

# Install packages with go get
function go_get {
    go get -d $1 
}

# Restore a repository to the default version
function clean_version {
    cd "$GOPATH_SRC$1"

    echo "clean: $1 ${*:2}"

    if is_git_repo $1; then
        git checkout master >/dev/null 2>&1
    else
        hg update >/dev/null 2>&1
    fi
}

# An iterative map implementation
function fmap {
    while read; do
        $1 $REPLY
    done <$2
}

# Call 'clean_version' on the given repositories
function clean {
    trap '' SIGHUP SIGINT SIGTERM

    fmap clean_version $DEP_FILE
}

# Set up dependencies and install the package
function install {
    # If something goes wrong, bring repositories to the
    # standard version.
    trap clean SIGHUP SIGINT SIGTERM

    fmap go_get $DEP_FILE

    fmap select_version $DEP_FILE

    cd $PKG_DIR
    echo "install: $(strip_gopath $PKG_DIR)"
    go install

    if [[ "$1" == '--no-clean' ]]; then
        exit 0
    fi
    
    # All right, clean reposiories and return
    clean    
}

case "${1-''}" in
    -f | --freeze) freeze 
        ;;
    -i | --install) install ${2-''} 
        ;;
    -c | --clean) clean 
        ;;
    *) usage
esac
